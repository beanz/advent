package main

import (
	_ "embed"
	assert "github.com/stretchr/testify/require"
	"testing"
)

func ExampleMain() {
	main()
	//Output:
	// Part 1: 3974
	// Part 2: 4500
}

//go:embed test1.txt
var test1 []byte

//go:embed input.txt
var safeinput []byte

func TestExplode(t *testing.T) {
	tests := []struct {
		in, out string
	}{
		{ "[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]" },
		{ "[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]" },
		{ "[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]" },
		{ "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]" },
		{ "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]" },
		{ "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]" },
		{ "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[15,[0,13]]],[1,1]]" },
		{ "[[[[14,14],[14,15]],[[15,14],[14,5]]],[[[0,7],[11,0]],[[12,[7,5]],[4,4]]]]",
			"[[[[14,14],[14,15]],[[15,14],[14,5]]],[[[0,7],[11,0]],[[19,0],[9,4]]]]" },
	}
	for _, tc := range tests {
		t.Run(tc.in, func (t *testing.T) {
			new, changed := Explode([]byte(tc.in))
			assert.True(t, changed)
			assert.Equal(t, tc.out, string(new))
		})
	}
}

func TestSplit(t *testing.T) {
	tests := []struct {
		in, out string
	}{
		{ "[[[[0,7],4],[15,[0,13]]],[1,1]]",
			"[[[[0,7],4],[[7,8],[0,13]]],[1,1]]" },
		{ "[[[[0,7],4],[[7,8],[0,13]]],[1,1]]",
			"[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]" },
	}
	for _, tc := range tests {
		t.Run(tc.in, func (t *testing.T) {
			new, changed := Split([]byte(tc.in))
			assert.True(t, changed)
			assert.Equal(t, tc.out, string(new))
		})
	}
}

func TestReduce(t *testing.T) {
	tests := []struct {
		in, out string
	}{
		{ "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]",
			"[[[[0,7],4],[[7,8],[6,0]]],[8,1]]" },
	}
	for _, tc := range tests {
		t.Run(tc.in, func (t *testing.T) {
			new := Reduce([]byte(tc.in))
			assert.Equal(t, tc.out, string(new))
		})
	}
}

func TestAdd(t *testing.T) {
	tests := []struct {
		a, b, out string
	}{
		// first example
		{ "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
			"[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
			"[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]" },
		{ "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
			"[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
			"[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]" },
		{ "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
			"[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
			"[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]" },
		{ "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
			"[7,[5,[[3,8],[1,4]]]]",
			"[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]" },
		{ "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
			"[[2,[2,2]],[8,[8,1]]]",
			"[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]" },
		{ "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
			"[2,9]",
			"[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]" },
		{ "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
			"[1,[[[9,3],9],[[9,0],[0,7]]]]",
			"[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]" },
		{ "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
			"[[[5,[7,4]],7],1]",
			"[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]" },
		{ "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
			"[[[[4,2],2],6],[8,7]]",
			"[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]" },
	// second example
		{ "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
			"[[[5,[2,8]],4],[5,[[9,9],0]]]",
			"[[[[7,0],[7,8]],[[7,9],[0,6]]],[[[7,0],[6,6]],[[7,7],[0,9]]]]", },
		{ "[[[[7,0],[7,8]],[[7,9],[0,6]]],[[[7,0],[6,6]],[[7,7],[0,9]]]]",
			"[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]",
			"[[[[7,7],[7,7]],[[7,0],[7,7]]],[[[7,7],[6,7]],[[7,7],[8,9]]]]" },
		{ "[[[[7,7],[7,7]],[[7,0],[7,7]]],[[[7,7],[6,7]],[[7,7],[8,9]]]]",
			"[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]",
			"[[[[6,6],[6,6]],[[7,7],[7,7]]],[[[7,0],[7,7]],[[7,8],[8,8]]]]" },
		{ "[[[[6,6],[6,6]],[[7,7],[7,7]]],[[[7,0],[7,7]],[[7,8],[8,8]]]]",
			"[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]",
			"[[[[6,6],[7,7]],[[7,7],[8,8]]],[[[8,8],[0,8]],[[8,9],[9,9]]]]" },
		{ "[[[[6,6],[7,7]],[[7,7],[8,8]]],[[[8,8],[0,8]],[[8,9],[9,9]]]]",
			"[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]",
			"[[[[6,6],[7,7]],[[7,7],[7,0]]],[[[7,7],[8,8]],[[8,8],[8,9]]]]" },
		{ "[[[[6,6],[7,7]],[[7,7],[7,0]]],[[[7,7],[8,8]],[[8,8],[8,9]]]]",
			"[[[[5,4],[7,7]],8],[[8,3],8]]",
			"[[[[7,7],[7,7]],[[7,7],[7,7]]],[[[0,7],[8,8]],[[8,8],[8,9]]]]" },
		{ "[[[[7,7],[7,7]],[[7,7],[7,7]]],[[[0,7],[8,8]],[[8,8],[8,9]]]]",
			"[[9,3],[[9,9],[6,[4,9]]]]",
			"[[[[7,7],[7,7]],[[7,7],[8,8]]],[[[8,8],[0,8]],[[8,9],[8,7]]]]" },
		{ "[[[[7,7],[7,7]],[[7,7],[8,8]]],[[[8,8],[0,8]],[[8,9],[8,7]]]]",
			"[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
			"[[[[7,7],[7,7]],[[7,7],[7,7]]],[[[8,7],[8,7]],[[7,9],[5,0]]]]" },
		{ "[[[[7,7],[7,7]],[[7,7],[7,7]]],[[[8,7],[8,7]],[[7,9],[5,0]]]]",
			"[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]",
			"[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]" },
	}
	for _, tc := range tests {
		t.Run(tc.a + " + " + tc.b, func (t *testing.T) {
			new := Add([]byte(tc.a), []byte(tc.b))
			assert.Equal(t, tc.out, string(new))
		})
	}
}

func TestMag(t *testing.T) {
	tests := []struct {
		in string
		mag int
	}{
		{ "[9,1]", 29 },
		{ "[1,9]", 21 },
		{ "[[9,1],[1,9]]", 129 },
		{ "[[1,2],[[3,4],5]]", 143 },
		{ "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384 },
		{ "[[[[1,1],[2,2]],[3,3]],[4,4]]", 445 },
		{ "[[[[3,0],[5,3]],[4,4]],[5,5]]", 791 },
		{ "[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137 },
		{ "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488 },
		{ "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", 4140 },
 	}
	for _, tc := range tests {
		t.Run(tc.in, func (t *testing.T) {
			assert.Equal(t, tc.mag, Magnitude([]byte(tc.in)))
		})
	}
}


func BenchmarkMain(b *testing.B) {
	benchmark = true
	for i := 0; i < b.N; i++ {
		b.StopTimer()
		copy(input, safeinput)
		b.StartTimer()
		main()
	}
}
