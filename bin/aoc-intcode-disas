#!/usr/bin/perl
use strict;
use warnings;
use v5.34;

use constant {
  OP_ADD => 1,
  OP_MUL => 2,
  OP_IN => 3,
  OP_OUT => 4,
  OP_JNZ => 5,
  OP_JZ => 6,
  OP_LT => 7,
  OP_EQ => 8,
  OP_BASE => 9,
  OP_HALT => 99,
};

my ($file) = shift || usage();
my $dir = ($file =~ m!^(.*/)! ? $1 : './');
my ($cfg) = shift || $dir . 'disassembly.cfg';
my $prog = read_file($file, $cfg);
while ($prog->{ip} < scalar @{$prog->{in}}) {
  decode($prog);
}
print "R: @{[sort {$a<=>$b} keys %{$prog->{reg}}]}\n";

sub op_str {
  return "halt" if ($_[0] == 99);
  return [qw/noop add mul in out jnz jz lt eq base/]->[$_[0]];
}

sub arity {
  return 0 if ($_[0] == 99);
  return [0, 3, 3, 1, 1, 2, 2, 3, 3, 1]->[$_[0]];
}

sub inst_str {
  my ($p) = @_;
  my $raw = $p->{in}->[$p->{ip}];
  my $op = $raw % 100;
  my $arity = arity($op);
  my (@args) = map {$p->{in}->[$p->{ip} + $_]} (1 .. $arity);
  my (@mode) = map {mode($raw, $_ - 1)} (1 .. $arity);
  my @args_str;
  for my $i (0 .. $arity - 1) {
    if ($mode[$i] == 0) {
      if (exists $p->{reg_name}->{$args[$i]}) {
        push @args_str, $p->{reg_name}->{$args[$i]};
        next;
      }
      $p->{reg}->{$args[$i]}++;
    }
    push @args_str, arg_str($mode[$i], $args[$i]);
  }
  my $arg_str = join " ", @args_str;
  my $op_str = op_str($op);
  my $extra = "";
  if ($raw == 109) {
    if ($args[0] > 8) {

      # probably initial set rather than stack offset
    } elsif ($args[0] > 0) {
      $extra .= ' sub ***';
    }
  }
  if ( (($raw == 1106 || $raw == 106) && $args[0] == 0)
    || (($raw == 1105 || $raw == 105) && $args[0] == 1))
  {
    $op_str = 'jmp';
    $arg_str = $args_str[1];
    if (exists $p->{label}->{$args[1]}) {
      $arg_str = $p->{label}->{$args[1]} . '/' . $args[1];
    }
    $raw = '20';
  } elsif ($raw == 1005 || $raw == 1006) {
    if (exists $p->{label}->{$args[1]}) {
      $arg_str = $args_str[0] . ' ' . $p->{label}->{$args[1]} . '/' . $args[1];
    }
  } elsif ((($raw == 2106 && $args[0] == 0) || ($raw == 2105 && $args[0] != 0))
    && $args[1] == 0)
  {
    $extra .= " return";
    $op_str = 'ret';
    $arg_str = $args_str[1];
    $raw = '21';
  } elsif ($raw == 1101 || $raw == 21101) {
    $extra = " ".join ",", $raw, @args;
    $op_str = 'seti';
    $arg_str = 'imm(' . ($args[0] + $args[1]) . ') ' . $args_str[2];
    $raw = '30';
  } elsif ($raw == 1102 || $raw == 21102) {
    $extra = " ".join ",", $raw, @args;
    $op_str = 'seti';
    $arg_str = 'imm(' . ($args[0] * $args[1]) . ') ' . $args_str[2];
    $raw = '30';
  } elsif (($op == 1 && $mode[0] == 1 && $args[0] == 0)
    || ($op == 2 && $mode[0] == 1 && $args[0] == 1))
  {
    $op_str = 'set';
    $arg_str = join ' ', $args_str[1], $args_str[2];
    $raw = '31';
  } elsif (($op == 1 && $mode[1] == 1 && $args[1] == 0)
    || ($op == 2 && $mode[1] == 1 && $args[1] == 1))
  {
    $op_str = 'set';
    $arg_str = join ' ', $args_str[0], $args_str[2];
    $raw = '31';
  } elsif ($raw == 101 && $args[0] == 1) {
    $op_str = 'inc';
    $arg_str = join ' ', $args_str[1], $args_str[2];
    $raw = '32';
  } elsif ($raw == 1001 && $args[1] == 1) {
    $op_str = 'inc';
    $arg_str = join ' ', $args_str[0], $args_str[2];
    $raw = '32';
  }
  return (sprintf('%5d %-4s %s%s', $raw, $op_str, $arg_str, $extra), $arity);
}

sub mode {
  my ($raw, $i) = @_;
  my $div = [100, 1000, 10000]->[$i];
  int($raw / $div) % 10;
}

sub mode_str {
  [qw/pos imm rel/]->[$_[0]];
}

sub arg_str {
  my ($mode, $arg) = @_;
  mode_str($mode) . "(" . $arg . ")";
}

sub decode {
  my ($p) = @_;
  my $skip = $p->{skip}->{$p->{ip}};
  if ($skip) {
    return skip($p, $skip);
  }
  if (exists $p->{label}->{$p->{ip}}) {
    print $p->{label}->{$p->{ip}}, ":\n";
  }
  my ($str, $arity) = inst_str($p);
  for my $r (@{$p->{replace}}) {
    my $find = $r->{find};
    my $replace = $r->{replace};
    my $guard = $r->{guard};
    $str =~ s/$find/$replace/ if ($str =~ $guard);
  }
  printf "%5d: %s\n", $p->{ip}, $str;
  $p->{ip} += 1 + $arity;
}

sub skip {
  my ($p, $skip) = @_;
  my $start = $p->{ip};
  my $end = $skip->{end};
  if ($end > scalar @{$p->{in}}) {
    $end = scalar @{$p->{in}};
  }
  if ($skip->{type} eq "length+ascii") {
    my $addr = $start;
    while ($addr < $end) {
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $len = $p->{in}->[$addr];
      my $s = join "", map {chr($p->{in}->[$addr + $_])} 1 .. $len;
      $s =~ s/([^ -~])/sprintf '\x%02x', ord($1)/ge;
      printf "%5d: len=%d %s\n", $addr, $len, $s;
      $addr += $len + 1;
    }
  } elsif ($skip->{type} eq "length+cipher201925") {
    my $addr = $start;
    while ($addr < $end) {
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $len = $p->{in}->[$addr];
      my $s = join "", map {chr($p->{in}->[$addr + $_]+($len+$_-1))} 1 .. $len;
      $s =~ s/([^ -~])/sprintf '\x%02x', ord($1)/ge;
      printf "%5d: len=%d %s\n", $addr, $len, $s;
      $addr += $len + 1;
    }
  } elsif ($skip->{type} =~ m!^decimal(?:/(\d+))?$!) {
    my $len = $1 // 8;
    my $addr = $start;
    while ($addr < $end) {
      if ($addr + $len >= $end) {
        $len = $end - $addr;
      }
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $s = join ", ",
        map {sprintf '%4d', $p->{in}->[$addr + $_]} 0 .. $len - 1;
      printf "%5d: dec/$len %s\n", $addr, $s;
      $addr += $len;
    }
  } elsif ($skip->{type} =~ m!^ascii/(\d+)$!) {
    my $len = $1;
    my $addr = $start;
    while ($addr < $end) {
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $s = join "", map {chr($p->{in}->[$addr + $_])} 0 .. $len - 1;
      $s =~ s/([^ -~])/sprintf '\x%02x', ord($1)/ge;
      printf "%5d: chars %s\n", $addr, $s;
      $addr += $len;
    }
  } elsif ($skip->{type} =~ m!^indexed/(\d+)/(.*)$!) {
    my $len = $1;
    my @chars = split //, $2;
    my $addr = $start;
    while ($addr < $end) {
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $s = join "", map {$chars[$p->{in}->[$addr + $_]]} 0 .. $len - 1;
      $s =~ s/([^ -~])/sprintf '\x%02x', ord($1)/ge;
      printf "%5d: indexed %s\n", $addr, $s;
      $addr += $len;
    }
  } else {
    warn "unsupported data format, '"
      . $skip->{type}
      . "' using simple format\n"
      if ($skip->{type} ne "simple");
    for my $addr ($start .. $end - 1) {
      if (exists $p->{label}->{$addr}) {
        print $p->{label}->{$addr}, ":\n";
      }
      my $extra =
        exists $p->{reg_name}->{$addr} ? " " . $p->{reg_name}->{$addr} : "";
      printf "%5d: data %d%s\n", $addr, $p->{in}->[$addr], $extra;
    }

  }
  $p->{ip} = $skip->{end};
}

sub usage {
  die "Usage: $0 <file> [<cfg>]\n@_";
}

sub read_file {
  my ($file, $cfg) = @_;
  open my $fh, '<', $file or usage("failed to open $file: $!\n");
  $_ = <$fh>;
  close $fh;
  my @i = m!(-?\d+)!g;
  my %prog = (ip => 0, in => \@i, skip => {}, reg_name => {}, label => {});
  return \%prog unless (-e $cfg);

  open $fh, '<', $cfg or usage("failed to open $cfg $!\n");
  while (<$fh>) {
    s!\s*\#.*$!!;
    next if (/^\s*$/);
    s!\@(\d+)\*\@(\d+)!$prog{in}->[$1]*$prog{in}->[$2]!eg;
    s!\@(\d+)\+\@(\d+)!$prog{in}->[$1]+$prog{in}->[$2]!eg;
    s!\@(\d+)!$prog{in}->[$1]!eg;
    s!(\d+)\*(\d+)!$1*$2!eg;
    s!(\d+)\+(\d+)!$1+$2!eg;
    if (/^DATA (\d+) (A?\d+)(?: (\S+)(?: (\S+))?)?\s*$/) {
      my ($start, $end, $label, $type) = ($1, $2, $3//'_', $4//"simple");
      if ($end =~ s/^A//) {
        $end = $end+1;
      } else {
        $end += $start;
      }
      $prog{skip}->{$start} = {end => $end, type => $type};
      if ($label ne '_') {
        $prog{label}->{$start} = $label;
      }
    } elsif (/^(R_\w+) (\d+)$/) {
      $prog{reg_name}->{$2} = $1;
    } elsif (/^(L_\w+) (\d+)$/) {
      $prog{label}->{$2} = $1;
    } elsif (/^REPLACE (.*)!(.*)!(.*)$/) {
      push @{$prog{replace}}, {find => $1, replace => $2, guard => $3};
    } else {
      warn "unsupported cfg line: '$_'";
    }
  }
  close $fh;
  return \%prog;
}

