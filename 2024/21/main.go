package main

import (
	_ "embed"
	"fmt"

	. "github.com/beanz/advent/lib-go"
)

//go:embed input.txt
var input []byte

func Parts(in []byte, args ...int) (int, int) {
	p1, p2 := 0, 0
	i := 0
	for i < len(in) {
		j, n := ChompUInt[int](in, i)
		cache := map[string][]int{}
		l1 := move_len(string(in[i:j+1]), 0, 2, cache)
		cache = map[string][]int{}
		l2 := move_len(string(in[i:j+1]), 0, 25, cache)
		p1 += n * l1
		p2 += n * l2
		i = j + 2
	}

	return p1, p2
}

func move_len(s string, depth, max int, cache map[string][]int) int {
	v, ok := cache[s]
	if !ok {
		cache[s] = make([]int, max+1)
	} else {
		if v[depth] != 0 {
			return v[depth] - 1
		}
	}
	pad := dirpad
	if depth == 0 {
		pad = numpad
	}
	l := 0
	var cur byte = 'A'
	for _, key := range []byte(s) {
		paths := keypaths(cur, key, pad)
		if depth == max {
			l += 1 + len(paths[0])
		} else {
			min := -1
			for _, path := range paths {
				sl := move_len(path+"A", depth+1, max, cache)
				if min == -1 || min > sl {
					min = sl
				}
			}
			l += min
		}
		cur = key
	}
	cache[s][depth] = l + 1
	return l
}

func keypaths(from, to byte, pad Pad) []string {
	return pad[string([]byte{from, to})]
}

func main() {
	p1, p2 := Parts(InputBytes(input))
	if !benchmark {
		fmt.Printf("Part 1: %d\n", p1)
		fmt.Printf("Part 2: %d\n", p2)
	}
}

type Pad map[string][]string

var (
	dirpad = Pad{
		"AA": {""},
		"<>": {">>"},
		"A>": {"v"},
		"<A": {">^>", ">>^"},
		"><": {"<<"},
		"^<": {"v<"},
		">v": {"<"},
		"^v": {"v"},
		"v>": {">"},
		"^^": {""},
		">^": {"^<", "<^"},
		"vA": {"^>", ">^"},
		"<^": {">^"},
		"vv": {""},
		"v<": {"<"},
		"A^": {"<"},
		"v^": {"^"},
		"<<": {""},
		"<v": {">"},
		">A": {"^"},
		"^A": {">"},
		">>": {""},
		"^>": {">v", "v>"},
		"A<": {"v<<", "<v<"},
		"Av": {"v<", "<v"},
	}
	numpad = Pad{
		"00": {""},
		"01": {"^<"},
		"02": {"^"},
		"03": {"^>", ">^"},
		"04": {"^^<", "^<^"},
		"05": {"^^"},
		"06": {"^^>", "^>^", ">^^"},
		"07": {"^^^<", "^^<^", "^<^^"},
		"08": {"^^^"},
		"09": {"^^^>", "^^>^", "^>^^", ">^^^"},
		"0A": {">"},
		"10": {">v"},
		"11": {""},
		"12": {">"},
		"13": {">>"},
		"14": {"^"},
		"15": {"^>", ">^"},
		"16": {"^>>", ">^>", ">>^"},
		"17": {"^^"},
		"18": {"^^>", "^>^", ">^^"},
		"19": {"^^>>", "^>^>", "^>>^", ">^^>", ">^>^", ">>^^"},
		"1A": {">>v", ">v>"},
		"20": {"v"},
		"21": {"<"},
		"22": {""},
		"23": {">"},
		"24": {"^<", "<^"},
		"25": {"^"},
		"26": {"^>", ">^"},
		"27": {"^^<", "^<^", "<^^"},
		"28": {"^^"},
		"29": {"^^>", "^>^", ">^^"},
		"2A": {">v", "v>"},
		"30": {"v<", "<v"},
		"31": {"<<"},
		"32": {"<"},
		"33": {""},
		"34": {"^<<", "<^<", "<<^"},
		"35": {"^<", "<^"},
		"36": {"^"},
		"37": {"^^<<", "^<^<", "^<<^", "<^^<", "<^<^", "<<^^"},
		"38": {"^^<", "^<^", "<^^"},
		"39": {"^^"},
		"3A": {"v"},
		"40": {">vv", "v>v"},
		"41": {"v"},
		"42": {">v", "v>"},
		"43": {">>v", ">v>", "v>>"},
		"44": {""},
		"45": {">"},
		"46": {">>"},
		"47": {"^"},
		"48": {"^>", ">^"},
		"49": {"^>>", ">^>", ">>^"},
		"4A": {">>vv", ">v>v", ">vv>", "v>>v", "v>v>"},
		"50": {"vv"},
		"51": {"v<", "<v"},
		"52": {"v"},
		"53": {">v", "v>"},
		"54": {"<"},
		"55": {""},
		"56": {">"},
		"57": {"^<", "<^"},
		"58": {"^"},
		"59": {"^>", ">^"},
		"5A": {">vv", "v>v", "vv>"},
		"60": {"vv<", "v<v", "<vv"},
		"61": {"v<<", "<v<", "<<v"},
		"62": {"v<", "<v"},
		"63": {"v"},
		"64": {"<<"},
		"65": {"<"},
		"66": {""},
		"67": {"^<<", "<^<", "<<^"},
		"68": {"^<", "<^"},
		"69": {"^"},
		"6A": {"vv"},
		"70": {">vvv", "v>vv", "vv>v"},
		"71": {"vv"},
		"72": {">vv", "v>v", "vv>"},
		"73": {">>vv", ">v>v", ">vv>", "v>>v", "v>v>", "vv>>"},
		"74": {"v"},
		"75": {">v", "v>"},
		"76": {">>v", ">v>", "v>>"},
		"77": {""},
		"78": {">"},
		"79": {">>"},
		"7A": {">>vvv", ">v>vv", ">vv>v", ">vvv>", "v>>vv", "v>v>v", "v>vv>", "vv>>v", "vv>v>"},
		"80": {"vvv"},
		"81": {"vv<", "v<v", "<vv"},
		"82": {"vv"},
		"83": {">vv", "v>v", "vv>"},
		"84": {"v<", "<v"},
		"85": {"v"},
		"86": {">v", "v>"},
		"87": {"<"},
		"88": {""},
		"89": {">"},
		"8A": {">vvv", "v>vv", "vv>v", "vvv>"},
		"90": {"vvv<", "vv<v", "v<vv", "<vvv"},
		"91": {"vv<<", "v<v<", "v<<v", "<vv<", "<v<v", "<<vv"},
		"92": {"vv<", "v<v", "<vv"},
		"93": {"vv"},
		"94": {"v<<", "<v<", "<<v"},
		"95": {"v<", "<v"},
		"96": {"v"},
		"97": {"<<"},
		"98": {"<"},
		"99": {""},
		"9A": {"vvv"},
		"A0": {"<"},
		"A1": {"^<<", "<^<"},
		"A2": {"^<", "<^"},
		"A3": {"^"},
		"A4": {"^^<<", "^<^<", "^<<^", "<^^<", "<^<^"},
		"A5": {"^^<", "^<^", "<^^"},
		"A6": {"^^"},
		"A7": {"^^^<<", "^^<^<", "^^<<^", "^<^^<", "^<^<^", "^<<^^", "<^^^<", "<^^<^", "<^<^^"},
		"A8": {"^^^<", "^^<^", "^<^^", "<^^^"},
		"A9": {"^^^"},
		"AA": {""},
	}
)

var benchmark = false
